name: CI
on:
  push:
    branches:
      - main
    tags:
      - v*

jobs:
  build:
    name: Build app
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ '3.8', '3.9', '3.10' ]

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
          all_but_latest: true

      - name: Clone repo
        uses: actions/checkout@v2

      - name: Setup python (x86)
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x86
      
      - name: Setup python (x64)
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install required libraries
        run: |
          py -3-64 -m pip install -U wheel pyinstaller setuptools tox
          py -3-64 -m pip install -r requirements.txt
          py -3-64 -m pip install -r requirements-optional.txt

          py -3-32 -m pip install -U wheel pyinstaller setuptools tox
          py -3-32 -m pip install -r requirements.txt
          py -3-32 -m pip install -r requirements-optional.txt

      - name: Test imports
        run: |
          # Setup for venv python x64
          echo "Creating virtual environment"
          py -3-64 -m venv test_imports_x64

          # Install mangadex-downloader
          echo "Installing mangadex-downloader"
          & ".\test_imports_x64\Scripts\python.exe" setup.py build
          Move-Item -Path ".\build\lib\mangadex_downloader" -Destination ".\test_imports_x64"
          Copy-Item -Path ".\test_imports.py" -Destination ".\test_imports_x64"

          # Preparing
          $venvbindir_x64 = ".\Scripts"
          $pythonvenv_x64 = "${venvbindir_x64}\python.exe"
          $pipvenv_x64 = "${venvbindir_x64}\pip.exe"
          Copy-Item -Path ".\requirements-optional.txt" -Destination ".\test_imports_x64"
          Copy-Item -Path ".\requirements.txt" -Destination ".\test_imports_x64"
          cd "test_imports_x64"

          # Install required libraries in venv x64
          echo "Installing required libraries"
          & "${pipvenv_x64}" install -U wheel
          & "${pipvenv_x64}" install -U -r requirements-optional.txt
          & "${pipvenv_x64}" install -U -r requirements.txt

          # Execute test imports
          echo "Executing test imports"
          & "${pythonvenv_x64}" "test_imports.py"

          cd "..\"

          # Setup for venv python x86
          echo "Creating virtual environment"
          py -3-32 -m venv test_imports_x86

          # Install mangadex-downloader
          echo "Installing mangadex-downloader"
          & ".\test_imports_x86\Scripts\python.exe" setup.py build
          Move-Item -Path ".\build\lib\mangadex_downloader" -Destination ".\test_imports_x86"
          Copy-Item -Path ".\test_imports.py" -Destination ".\test_imports_x86"

          # Preparing
          $venvbindir_x86 = ".\Scripts"
          $pythonvenv_x86 = "${venvbindir_x86}\python.exe"
          $pipvenv_x86 = "${venvbindir_x86}\pip.exe"
          Copy-Item -Path ".\requirements-optional.txt" -Destination ".\test_imports_x86"
          Copy-Item -Path ".\requirements.txt" -Destination ".\test_imports_x86"
          cd "test_imports_x86"

          # Install required libraries in venv x86
          echo "Installing required libraries"
          & "${pipvenv_x86}" install -U wheel
          & "${pipvenv_x86}" install -U -r requirements-optional.txt
          & "${pipvenv_x86}" install -U -r requirements.txt

          # Execute test imports
          echo "Executing test imports"
          & "${pythonvenv_x86}" "test_imports.py"

      - name: Get python version
        run: |
          $PythonVersion = (python --version)
          echo "python_version=${PythonVersion}" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Build mangadex-downloader with PyInstaller
      # only allow python 3.10

      - name: Compile script
        if: ${{ contains(env.python_version, '3.10') }}
        run: |
          py -3-64 -m PyInstaller run.py -n "mangadex-dl_x64" --distpath "./dist_x64"
          py -3-32 -m PyInstaller run.py -n "mangadex-dl_x86" --distpath "./dist_x86"

      - name: Cleanup build
        if: startsWith(github.ref, 'refs/tags/') && contains(env.python_version, '3.10') && github.repository == 'mansuf/mangadex-downloader'
        run: |
          # x86 executable
          copy "LICENSE" "dist_x86\mangadex-dl_x86"
          copy "README.md" "dist_x86\mangadex-dl_x86"
          echo "${{ github.ref_name }}" | Out-File -FilePath "dist_x86\mangadex-dl_x86\version.txt" -NoNewLine
          echo "mangadex-dl.exe --update" | Out-File -FilePath "dist_x86\mangadex-dl_x86\update.bat"
          echo "start cmd" | Out-File -FilePath "dist_x86\mangadex-dl_x86\start cmd.bat"
          Rename-Item -Path "dist_x86\mangadex-dl_x86\mangadex-dl_x86.exe" -NewName "mangadex-dl.exe"
          Rename-Item -Path "dist_x86\mangadex-dl_x86" -NewName "mangadex-dl"
          Compress-Archive -Path "dist_x86\mangadex-dl" -DestinationPath "mangadex-dl_x86_${{ github.ref_name }}.zip"

          # x64 executable
          copy "LICENSE" "dist_x64\mangadex-dl_x64"
          copy "README.md" "dist_x64\mangadex-dl_x64"
          echo "${{ github.ref_name }}" | Out-File -FilePath "dist_x64\mangadex-dl_x64\version.txt" -NoNewLine
          echo "mangadex-dl.exe --update" | Out-File -FilePath "dist_x64\mangadex-dl_x64\update.bat"
          echo "start cmd" | Out-File -FilePath "dist_x64\mangadex-dl_x64\start cmd.bat"
          Rename-Item -Path "dist_x64\mangadex-dl_x64\mangadex-dl_x64.exe" -NewName "mangadex-dl.exe"
          Rename-Item -Path "dist_x64\mangadex-dl_x64" -NewName "mangadex-dl"
          Compress-Archive -Path "dist_x64\mangadex-dl" -DestinationPath "mangadex-dl_x64_${{ github.ref_name }}.zip"

          # legacy x86 executable
          Compress-Archive -Path "dist_x86\mangadex-dl" -DestinationPath "mangadex-dl_${{ github.ref_name }}.zip"

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/') && contains(env.python_version, '3.10') && github.repository == 'mansuf/mangadex-downloader'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.GIRHUB_REF_NAME }}
          name: mangadex-downloader ${{ github.ref_name }}
          files: |
            mangadex-dl_${{ github.ref_name }}.zip
            mangadex-dl_x64_${{ github.ref_name }}.zip
            mangadex-dl_x86_${{ github.ref_name }}.zip
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}