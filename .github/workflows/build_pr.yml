name: Pull Request build check
on:
  pull_request:
    paths:
      - '**.py'
      - 'requirements.txt'
      - 'docs/*'


jobs:
  build:
    name: Build app & docs
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ '3.8', '3.9', '3.10' ]

    steps:
      - name: Clone repo
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x86

      - name: Install required libraries
        run: |
          pip install -U wheel pyinstaller
          pip install -r requirements.txt
          pip install -r requirements-docs.txt
          pip install -r requirements-optional.txt

      - name: Test imports
        run: |
          # Setup for venv python x64
          echo "Creating virtual environment"
          py -3-64 -m venv test_imports_x64

          # Install mangadex-downloader
          echo "Installing mangadex-downloader"
          & ".\test_imports_x64\Scripts\python.exe" setup.py build
          Move-Item -Path ".\build\lib\mangadex_downloader" -Destination ".\test_imports_x64"
          Copy-Item -Path ".\test_imports.py" -Destination ".\test_imports_x64"

          # Preparing
          $venvbindir_x64 = ".\Scripts"
          $pythonvenv_x64 = "${venvbindir_x64}\python.exe"
          $pipvenv_x64 = "${venvbindir_x64}\pip.exe"
          Copy-Item -Path ".\requirements-optional.txt" -Destination ".\test_imports_x64"
          Copy-Item -Path ".\requirements.txt" -Destination ".\test_imports_x64"
          cd "test_imports_x64"

          # Install required libraries in venv x64
          echo "Installing required libraries"
          & "${pipvenv_x64}" install -U wheel
          & "${pipvenv_x64}" install -U -r requirements-optional.txt
          & "${pipvenv_x64}" install -U -r requirements.txt

          # Execute test imports
          echo "Executing test imports"
          & "${pythonvenv_x64}" "test_imports.py"

          cd "..\"

          # Setup for venv python x86
          echo "Creating virtual environment"
          py -3-32 -m venv test_imports_x86

          # Install mangadex-downloader
          echo "Installing mangadex-downloader"
          & ".\test_imports_x86\Scripts\python.exe" setup.py build
          Move-Item -Path ".\build\lib\mangadex_downloader" -Destination ".\test_imports_x86"
          Copy-Item -Path ".\test_imports.py" -Destination ".\test_imports_x86"

          # Preparing
          $venvbindir_x86 = ".\Scripts"
          $pythonvenv_x86 = "${venvbindir_x86}\python.exe"
          $pipvenv_x86 = "${venvbindir_x86}\pip.exe"
          Copy-Item -Path ".\requirements-optional.txt" -Destination ".\test_imports_x86"
          Copy-Item -Path ".\requirements.txt" -Destination ".\test_imports_x86"
          cd "test_imports_x86"

          # Install required libraries in venv x86
          echo "Installing required libraries"
          & "${pipvenv_x86}" install -U wheel
          & "${pipvenv_x86}" install -U -r requirements-optional.txt
          & "${pipvenv_x86}" install -U -r requirements.txt

          # Execute test imports
          echo "Executing test imports"
          & "${pythonvenv_x86}" "test_imports.py"

      - name: Get python version
        run: |
          $PythonVersion = (python --version)
          echo "python_version=${PythonVersion}" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Build mangadex-downloader with PyInstaller
      # only allow python 3.10

      - name: Compile script
        if: ${{ contains(env.python_version, '3.10') }}
        run: |
          py -3-64 -m PyInstaller run.py -n "mangadex-dl_x64" --distpath "./dist_x64"
          py -3-32 -m PyInstaller run.py -n "mangadex-dl_x86" --distpath "./dist_x86"

      - name: Run compiled script
        if: ${{ contains(env.python_version, '3.10') }}
        run: |
          & ".\dist_x64\mangadex-dl_x64\mangadex-dl_x64.exe" --version
          & ".\dist_x86\mangadex-dl_x86\mangadex-dl_x86.exe" --version

      # Only build docs in Python 3.10

      - name: Build docs
        if: contains(env.python_version, '3.10')
        run: |
          cd docs
          sphinx-build -M "html" "." "_build"

